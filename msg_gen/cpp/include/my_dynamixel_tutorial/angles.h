/* Auto-generated by genmsg_cpp for file /home/ssr/fuerte_workspace/sandbox/my_dynamixel_tutorial/msg/angles.msg */
#ifndef MY_DYNAMIXEL_TUTORIAL_MESSAGE_ANGLES_H
#define MY_DYNAMIXEL_TUTORIAL_MESSAGE_ANGLES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace my_dynamixel_tutorial
{
template <class ContainerAllocator>
struct angles_ {
  typedef angles_<ContainerAllocator> Type;

  angles_()
  : theta1(0.0)
  , theta2(0.0)
  , theta3(0.0)
  , theta4(0.0)
  , theta5(0.0)
  , theta6(0.0)
  {
  }

  angles_(const ContainerAllocator& _alloc)
  : theta1(0.0)
  , theta2(0.0)
  , theta3(0.0)
  , theta4(0.0)
  , theta5(0.0)
  , theta6(0.0)
  {
  }

  typedef double _theta1_type;
  double theta1;

  typedef double _theta2_type;
  double theta2;

  typedef double _theta3_type;
  double theta3;

  typedef double _theta4_type;
  double theta4;

  typedef double _theta5_type;
  double theta5;

  typedef double _theta6_type;
  double theta6;


  typedef boost::shared_ptr< ::my_dynamixel_tutorial::angles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_dynamixel_tutorial::angles_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct angles
typedef  ::my_dynamixel_tutorial::angles_<std::allocator<void> > angles;

typedef boost::shared_ptr< ::my_dynamixel_tutorial::angles> anglesPtr;
typedef boost::shared_ptr< ::my_dynamixel_tutorial::angles const> anglesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::my_dynamixel_tutorial::angles_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::my_dynamixel_tutorial::angles_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace my_dynamixel_tutorial

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::my_dynamixel_tutorial::angles_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::my_dynamixel_tutorial::angles_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::my_dynamixel_tutorial::angles_<ContainerAllocator> > {
  static const char* value() 
  {
    return "01c16b8753716d52de66552164fe680a";
  }

  static const char* value(const  ::my_dynamixel_tutorial::angles_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x01c16b8753716d52ULL;
  static const uint64_t static_value2 = 0xde66552164fe680aULL;
};

template<class ContainerAllocator>
struct DataType< ::my_dynamixel_tutorial::angles_<ContainerAllocator> > {
  static const char* value() 
  {
    return "my_dynamixel_tutorial/angles";
  }

  static const char* value(const  ::my_dynamixel_tutorial::angles_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::my_dynamixel_tutorial::angles_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 theta1\n\
float64 theta2\n\
float64 theta3\n\
float64 theta4\n\
float64 theta5\n\
float64 theta6\n\
\n\
";
  }

  static const char* value(const  ::my_dynamixel_tutorial::angles_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::my_dynamixel_tutorial::angles_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::my_dynamixel_tutorial::angles_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.theta1);
    stream.next(m.theta2);
    stream.next(m.theta3);
    stream.next(m.theta4);
    stream.next(m.theta5);
    stream.next(m.theta6);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct angles_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_dynamixel_tutorial::angles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::my_dynamixel_tutorial::angles_<ContainerAllocator> & v) 
  {
    s << indent << "theta1: ";
    Printer<double>::stream(s, indent + "  ", v.theta1);
    s << indent << "theta2: ";
    Printer<double>::stream(s, indent + "  ", v.theta2);
    s << indent << "theta3: ";
    Printer<double>::stream(s, indent + "  ", v.theta3);
    s << indent << "theta4: ";
    Printer<double>::stream(s, indent + "  ", v.theta4);
    s << indent << "theta5: ";
    Printer<double>::stream(s, indent + "  ", v.theta5);
    s << indent << "theta6: ";
    Printer<double>::stream(s, indent + "  ", v.theta6);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MY_DYNAMIXEL_TUTORIAL_MESSAGE_ANGLES_H

